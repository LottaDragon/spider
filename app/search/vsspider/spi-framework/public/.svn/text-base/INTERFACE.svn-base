 -- selector -> cc (Register)

 { Sender:%s, Pack_type:%u, LogID:%u, SelectID:%u }
 // Pack_type = PACK_ST_LOGIN_CC


 -- selector -> cc (Data)

 { BASE, Pack_type:%u, s_ipaddr:%s, s_port:%d, s_robots:%d, SelectID:%u, GroupID:%d,
   s_accept:%d, s_forward:%d }
 // Pack_type = PACK_ST_PUSH_CC (*)


 -- selector -> ba (Register)

 { Sender:%s, Pack_type:%u, myID:%u, Subpacknum:%u,
   subpacks - [ { SessionID:%u, GroupID:%u, Priority:%u, Importance:%u, Require:%s, Allocated:%s } ]
 }
 // Pack_type = eSelectorCMDRegister

    ba -> selector
  
 { Sender:%s, Pack_type:%d, myID:%d }
 // Pack_type = eBACMDRegisterResp


 -- anyone -> ba (NewArbitrate)

 { Sender:%s, Pack_type:%u, Reason:%s, SessionID:%u }
 // Pack_type = eBACMDNewArbitrate
 
    ba -> anyone (NewArbitrate)
 
 { Sender:%s, Pack_type:%u }
 // Pack_type = eBACMDNewArbitrateResp
 

 -- ba -> cc/selector (Result)

 { Sender:%s, Pack_type:%d, session_id:%u, Subpacknum:%d,
   subpacks - [ { SelectID:%u, session_id:%u, GroupID:%u, Allocated:%s } ]
 }
 // Pack_type = eBACMDResult


 -- selector -> ba (Result)
 
 { Sender:%s, Pack_type:%d }
 // Pack_type = eSelectorCMDResultResp


 -- ba -> ab (Available)

 { Sender:%s, LogID:%llu, Pack_type:%d, session_id:%u }
 // Pack_type = PACK_QUERY_AB_REQ

    ab -> ba (Available)

 { Pack_type:%u,session_id:%d,result:%d,conn_num:%d,limit:%d }
 // Pack_type = XXX


 -- ba -> selector (Arbitrate)

 { Sender:%s, Pack_type:%d, SessionID:%d, Available:%s, myID:%d }
 // Pack_type = eBACMDArbitrate

    selector- > ba (Arbitrate)

 { Sender:%s, Pack_type:%d, Subpacknum:%u,
   subpacks - [ { SessionID:%u,GroupID:%u,Priority:%u,Importance:%u,Require:%s,Allocated:%s } ]
 }
 // Pack_type = eSelectorCMDArbitrateResp


 -- anyone --> saver
 	{ Sender:%s,Pack_type:%d,LogID:%u,ReqID:%u,BASE }
 	// Pack_type = PACK_CRAWL_RESULT 
 	
 	{ Sender:%s,Pack_type:%d,LogID:%u,ReqID:%u,Subpacknum:%d,Links:[BASE]}
 	// Pack_type = PACK_FOLLOW_LINK 
 	
 	{ Sender:%s,Pack_type:%d,LogID:%u,ReqID:%u,stat_name:%s }
 	// Pack_type = PACK_DUMP_FIFO_STAT
 	
 	{ Sender:%s,Pack_type:%d,LogID:%u,ReqID:%u,stat_name:%s }
 	// Pack_type = PACK_LOAD_FIFO_STAT
 	
 	{ Sender:%s,Pack_type:%d,LogID:%u,ReqID:%u }
 	// Pack_type = PACK_STOP_SAVER

 	
 -- saver --> anyRequester (请求应答包)
 	{ Sender:%s,Pack_type:%d,LogID:%u,ReqID:%u }
 	// Pack_type = {PACK_SAVER_SUCCESS|PACK_SAVER_FAIL|PACK_INVALID_PACK_TYPE}
 
 
 -- anyone <--> linkdb
// update请求 --begin{
 	{Sender:%s,Pack_type:%u,LogID:%u,ReqID:%u,BASE}
 	// Pack_type = PACK_LINKDB_UPDATE
 	
 	//请求的结束响应 (linkdb-->requestor) 成功是没有这个响应
 	{Sender:%s,Pack_type:%u,LogID:%u,ReqID:%u}
 	// Pack_type = PACK_LINKDB_SUCCESS|PACK_LINKDB_FAILED|PACK_LINKDB_NOT_FOUND
// update请求 --end}

// insert请求 --begin{
 	{Sender:%s,Pack_type:%u,LogID:%u,ReqID:%u,BASE}
 	// Pack_type = PACK_LINKDB_INSERT
 	
 	//请求的结束响应 (linkdb-->requestor) 成功是没有这个响应
 	{Sender:%s,Pack_type:%u,LogID:%u,ReqID:%u}
 	// Pack_type = PACK_LINKDB_SUCCESS|PACK_LINKDB_FAILED|PACK_LINKDB_NOT_FOUND|PACK_LINKDB_EXIST
// insert请求 --end}

// seek请求 --begin{	
 	{Sender:%s,Pack_type:%u,LogID:%u,ReqID:%u,link_id:%llu,session_id:%llu,site_id:%llu,set_is_select:%u,data_part:%u}
 	// Pack_type = PACK_LINKDB_SEEK
 	
 	//请求的数据响应 (linkdb-->requestor)
 	{Sender:%s,Pack_type:%u,LogID:%u,ReqID:%u,BASE}
 	// Pack_type = PACK_LINKDB_SEEK
 	
 	//请求的结束响应 (linkdb-->requestor) 成功是没有这个响应
 	{Sender:%s,Pack_type:%u,LogID:%u,ReqID:%u}
 	// Pack_type = PACK_LINKDB_FAILED|PACK_LINKDB_NOT_FOUND
// seek请求 --end}
	
// select请求 --begin{
 	{	Sender:%s,Pack_type:%u,LogID:%u,ReqID:%u,Subpacknum:%d,
 		Requests:[{session_id:%d,link_type:%d,link_level:%d,robots_version:%d,sel_time_limit:%d,count_limit%d}]
 	} 	
 	// Pack_type = PACK_LINKDB_SELECT
 	
 	//请求的数据响应 (linkdb-->requestor)
 	{Sender:%s,Pack_type:%u,LogID:%u,ReqID:%u,BASE}
 	// Pack_type = PACK_LINKDB_SELECT
 	
 	//请求的结束响应 (linkdb-->requestor)
 	{Sender:%s,Pack_type:%u,LogID:%u,ReqID:%u}
 	// Pack_type = PACK_LINKDB_END
// select请求 --end}

// delete请求 --begin{
 	{Sender:%s,Pack_type:%u,LogID:%u,ReqID:%u,link_id:%d,session_id:%d,site_id:%d,}
 	// Pack_type = PACK_LINKDB_DELETE
 	
 	//请求的结束响应 (linkdb-->requestor)
 	{Sender:%s,Pack_type:%u,LogID:%u,ReqID:%u}
 	// Pack_type = PACK_LINKDB_SUCCESS|PACK_LINKDB_NOT_FOUND|PACK_LINKDB_FAILED
// delete请求 --end}

// SESSION_LIST请求 --begin{	
 	{Sender:%s,Pack_type:%u,LogID:%u,ReqID:%u}
 	// Pack_type = PACK_LINKDB_SESSION_LIST
 	
 	//请求的数据响应 (linkdb-->requestor)
 	{Sender:%s,Pack_type:%u,LogID:%u,ReqID:%u,Subpacknum:%u,List:[{session_id}]}
	// Pack_type = PACK_LINKDB_SESSION_LIST
// SESSION_LIST请求 --end}

// SESSION_STAT请求 --begin{	
 	{Sender:%s,Pack_type:%u,LogID:%u,ReqID:%u,session_id:%d}
 	// Pack_type = PACK_LINKDB_SESSION_STAT
	
	//请求的数据响应 (linkdb-->requestor)
	{	Sender:%s,Pack_type:%u,LogID:%u,ReqID:%u,session_id:%llu,Subpacknum:%u,
		List:[{link_type:%u,link_level:%u,total:%u,newlink:%u}]
	}
	// Pack_type = PACK_LINKDB_SESSION_STAT
// SESSION_STAT请求 --end}


-- 监控日志格式
	统一使用pulic/misc.h中定义的NOTICE输出到各自的log中，提供三种功能：
1. 统计次数 vsmon=sid:sessionid;c_name1:count1;c_name2:count2
    ==> sid:sessionid name1:sum(count1) name2:sum(count2)
2. 直接输出 vsmon=sid:sessionid;d_name3:value;d_name4:value
    ==> sid:sessionid name3:value name4:value
3. 两两取差然后取均值
    vsmon=sid:sessionid;t_name5:value5;t_name6:value6;t_name7:value7
        ==>sid:sessionid name6-name5:avg(value6-value5) name7-name6:avg(value7-value6)

-- glossary -----------------------------
	sv.mrg: saver merge
	sv: saver
	cc: crawler control
	crw：crawler
	pp|ec: page processor
	ab: ability monitor
	ba: 
	s: selector
	ldb: linkdb
